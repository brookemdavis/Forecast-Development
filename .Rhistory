library("rstan")
library("calibrate")
library(dplyr)
# read in data
SRdat_raw <- read.csv("Chilliwack_updaterec.csv")
Run_Ricker <- function(Dat = SRdat_raw, BroodYears = c(2015,2016), Name = "2020_AllDat", seed = 36){
# Create a vector for predicting brood year recruits, and also for plotting
Brood_Year_EFFs <- Dat %>% filter(Year %in% BroodYears) %>% pull(eff_fem)
Brood_Year_EFFs <- c(Brood_Year_EFFs, seq(1, max(Dat$eff_fem, na.rm=T)*1.2, length = 100))
#remove years with NA's for model
Mod_Dat <- Dat %>% filter(is.na(rec) == F)
# set up stan model data
data_single_pop_es<-list(N=length(Mod_Dat$rec), eff=Mod_Dat$eff_fem, rec=Mod_Dat$rec, N_new=length(Brood_Year_EFFs)
, x_new=Brood_Year_EFFs)
# set seed and run stan model
set.seed(seed)
fit_single_pop_es <- stan(file = 'one_pop.stan', data = data_single_pop_es, iter = 20000, chains = 4,
control = list(adapt_delta = 0.95))
# Extract predictions for age4s and age5s
fit_values<-extract(fit_single_pop_es)
Age5 <- quantile(fit_values$rec_pred[,1], c(0.1,0.25,0.5,0.75,0.9))
Age4 <- quantile(fit_values$rec_pred[,2], c(0.1,0.25,0.5,0.75,0.9))
# what proportion of fish return at age 4? Use Mod Dat, since will have complete recruitements
P4 <- mean(Mod_Dat$rec4/Mod_Dat$rec)
Age4_Pred <- Age4*P4
Age5_Pred <- Age5*(1-P4)
Total = Age4_Pred + Age5_Pred
# calculate age 4 RPS
RPS_Age4 <- Age4_Pred/Brood_Year_EFFs[2]
# make output table
Tab_Out <- data.frame(rbind(Age4_Pred, Age5_Pred, Total, RPS_Age4))
write.csv(Tab_Out, paste("Tab_Out",Name ,".csv", sep=""))
# Pull out other predictions (not brood years) to plot
Pred_Mat <- as.matrix(fit_values$rec_pred[, 3:102])
# Turn this into bounds for plot
Preds <- data.frame(EFF = Brood_Year_EFFs[3:102])
Preds$Up <- Preds$Low <-  NA
for(i in 1:dim(Preds)[1]){
Quants <- quantile(fit_values$rec_pred[,i+2], c(0.1,0.25,0.5,0.75, 0.9))
Preds$Low[i] <- Quants[1]
Preds$MedLow[i] <- Quants[2]
Preds$Est[i] <- Quants[3]
Preds$MedUp[i] <- Quants[4]
Preds$Up[i] <- Quants[5]
}
# plot
cols <- c("50%" = "red", "80%" = "red")
Fig <- ggplot(data=Preds, mapping = aes(x=EFF, y=Est)) +
geom_line( col = "red", size = 2) +
geom_ribbon(aes(ymin = Low, ymax = Up, x=EFF), fill = "red", alpha = 0.2) +
geom_ribbon(aes(ymin = MedLow, ymax = MedUp, x=EFF), fill = "red", alpha = 0.4) +
geom_point(data=Mod_Dat, mapping=aes(x=eff_fem,y=rec), size = 1.2) +
xlab("Eff. Female Spawners") + ylab("Recruits") +
coord_cartesian(ylim = c(0, 500000), xlim = c(0, 80000)) +
# add lines for 2014 and 2015 EFF
geom_vline(xintercept = Brood_Year_EFFs[1], linetype = "dashed") +
geom_vline(xintercept = Brood_Year_EFFs[2]) +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(labels = scales::comma) +
#scale_linetype_manual(values = c("2014 Brood" = "1", "2015 Brood" = "2"))
#scale_color_manual(name = 'Ricker Uncertainty', values = cols ) +
#scale_colour_manual(name = 'Brood Year Escapements',  values =cols, labels = c('2015')) +
#scale_colour_manual(name="Error Bars",values=cols) + scale_fill_manual(name="Bar",values=cols)
# can't seem to get legend to work -- come back to
theme_classic()
ggsave(paste(Name, ".pdf", sep=""), plot = Fig, width = 4, height = 3, units = "in")
}
Run_Ricker <- function(Dat = SRdat_raw, BroodYears = c(2015,2016), Name = "2020_AllDat", seed = 36){
# Create a vector for predicting brood year recruits, and also for plotting
Brood_Year_EFFs <- Dat %>% filter(Year %in% BroodYears) %>% pull(eff_fem)
Brood_Year_EFFs <- c(Brood_Year_EFFs, seq(1, max(Dat$eff_fem, na.rm=T)*1.2, length = 100))
#remove years with NA's for model
Mod_Dat <- Dat %>% filter(is.na(rec) == F)
# set up stan model data
setwd("N:/Sockeye Analytical/Fraser Sockeye Forecast/Chilliwack 2019_2020")
library("rstan")
library("calibrate")
library(dplyr)
# read in data
SRdat_raw <- read.csv("Chilliwack_updaterec.csv")
library("rstan")
library("calibrate")
library(dplyr)
# read in data
SRdat_raw <- read.csv("Chilliwack_updaterec.csv")
Run_Ricker <- function(Dat = SRdat_raw, BroodYears = c(2015,2016), Name = "2020_AllDat", seed = 36, iter=10000){
# Create a vector for predicting brood year recruits, and also for plotting
Brood_Year_EFFs <- Dat %>% filter(Year %in% BroodYears) %>% pull(eff_fem)
Brood_Year_EFFs <- c(Brood_Year_EFFs, seq(1, max(Dat$eff_fem, na.rm=T)*1.2, length = 100))
#remove years with NA's for model
Mod_Dat <- Dat %>% filter(is.na(rec) == F)
# set up stan model data
data_single_pop_es<-list(N=length(Mod_Dat$rec), eff=Mod_Dat$eff_fem, rec=Mod_Dat$rec,
N_new=length(Brood_Year_EFFs), x_new=Brood_Year_EFFs)
# set seed and run stan model
set.seed(seed)
fit_single_pop_es <- stan(file = 'one_pop.stan', data = data_single_pop_es, iter = iter, chains = 4,
control = list(adapt_delta = 0.95))
# Extract predictions for age4s and age5s
fit_values<-extract(fit_single_pop_es)
Age5 <- quantile(fit_values$rec_pred[,1], c(0.1,0.25,0.5,0.75,0.9))
Age4 <- quantile(fit_values$rec_pred[,2], c(0.1,0.25,0.5,0.75,0.9))
# what proportion of fish return at age 4? Use Mod Dat, since will have complete recruitements
P4 <- mean(Mod_Dat$rec4/Mod_Dat$rec)
library(dplyr)
# read in data
SRdat_raw <- read.csv("Chilliwack_updaterec.csv")
#=================================================================================
# 2020 data starting in 2001
SRdat_Start2001 <- SRdat_raw %>% filter(Year >= 2001)
library(TMB)
dyn.load(dynlib("Ricker"))
# want to scale down all data so close to 0
Scale <- 10000
Dat <- SRdat_Start2001 %>% filter(is.na(rec)==F)
data <- list()
data$S <- Dat$Escape/Scale
data$logR <- log(Dat$rec/Scale)
data$Priors <- 0
# need to have these in Data even though aren't used
data$logA_mean <- 0
data$logA_sig <- 0
data$Sig_Gam_Dist <- 0
data$Smax_mean <- 0
data$Smax_sig <- 0
data$Scale <- Scale
param <- list()
param$logA <- 1
param$Smax <- as.numeric(quantile(Dat$Escape, 0.8, na.rm = T)/Scale)
param$logSigma <- -2
# Now Fit TMB model
obj <- MakeADFun(data, param, DLL="Ricker", silent=TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr, control = list(eval.max = 1e5, iter.max = 1e5))
# pull out estimates from ML fit
# Create Table of outputs
All_Ests <- data.frame(summary(sdreport(obj)))
All_Ests$Param <- row.names(All_Ests)
All_Ests
All_Ests$Estimate[All_Ests$Param == "SMSY"]
head(SRdat_Start2001)
# put Escape in eff_fem column so that function will run
SRdat_Start2001$eff_fem <- SRdat_Start2001$Escape
# put Escape in eff_fem column so that function will run
SRdat_Start2001$eff_fem <- SRdat_Start2001$Escape
?stan
Esc_Fit <- Run_Ricker(Dat = SRdat_Start2001, BroodYears = c(2015,2016),
Name = "2020_TotalEsc", seed = 36, iter = 5000)
Run_Ricker <- function(Dat = SRdat_raw, BroodYears = c(2015,2016), Name = "2020_AllDat", seed = 36, iter=10000){
# Create a vector for predicting brood year recruits, and also for plotting
Brood_Year_EFFs <- Dat %>% filter(Year %in% BroodYears) %>% pull(eff_fem)
Brood_Year_EFFs <- c(Brood_Year_EFFs, seq(1, max(Dat$eff_fem, na.rm=T)*1.2, length = 100))
#remove years with NA's for model
Mod_Dat <- Dat %>% filter(is.na(rec) == F)
# set up stan model data
data_single_pop_es<-list(N=length(Mod_Dat$rec), eff=Mod_Dat$eff_fem, rec=Mod_Dat$rec,
N_new=length(Brood_Year_EFFs), x_new=Brood_Year_EFFs)
# set seed and run stan model
set.seed(seed)
fit_single_pop_es <- stan(file = 'one_pop.stan', data = data_single_pop_es, iter = iter, chains = 4,
control = list(adapt_delta = 0.95))
# Extract predictions for age4s and age5s
fit_values<-extract(fit_single_pop_es)
Age5 <- quantile(fit_values$rec_pred[,1], c(0.1,0.25,0.5,0.75,0.9))
Age4 <- quantile(fit_values$rec_pred[,2], c(0.1,0.25,0.5,0.75,0.9))
# what proportion of fish return at age 4? Use Mod Dat, since will have complete recruitements
P4 <- mean(Mod_Dat$rec4/Mod_Dat$rec)
Age4_Pred <- Age4*P4
Age5_Pred <- Age5*(1-P4)
Total = Age4_Pred + Age5_Pred
# calculate age 4 RPS
RPS_Age4 <- Age4_Pred/Brood_Year_EFFs[2]
# make output table
Tab_Out <- data.frame(rbind(Age4_Pred, Age5_Pred, Total, RPS_Age4))
write.csv(Tab_Out, paste("Tab_Out",Name ,".csv", sep=""))
# Pull out other predictions (not brood years) to plot
Pred_Mat <- as.matrix(fit_values$rec_pred[, 3:102])
# Turn this into bounds for plot
Preds <- data.frame(EFF = Brood_Year_EFFs[3:102])
Preds$Up <- Preds$Low <-  NA
for(i in 1:dim(Preds)[1]){
Quants <- quantile(fit_values$rec_pred[,i+2], c(0.1,0.25,0.5,0.75, 0.9))
Preds$Low[i] <- Quants[1]
Preds$MedLow[i] <- Quants[2]
Preds$Est[i] <- Quants[3]
Preds$MedUp[i] <- Quants[4]
Preds$Up[i] <- Quants[5]
}
# plot
cols <- c("50%" = "red", "80%" = "red")
Fig <- ggplot(data=Preds, mapping = aes(x=EFF, y=Est)) +
geom_line( col = "red", size = 2) +
geom_ribbon(aes(ymin = Low, ymax = Up, x=EFF), fill = "red", alpha = 0.2) +
geom_ribbon(aes(ymin = MedLow, ymax = MedUp, x=EFF), fill = "red", alpha = 0.4) +
geom_point(data=Mod_Dat, mapping=aes(x=eff_fem,y=rec), size = 1.2) +
xlab("Eff. Female Spawners") + ylab("Recruits") +
coord_cartesian(ylim = c(0, 500000), xlim = c(0, 80000)) +
# add lines for 2014 and 2015 EFF
geom_vline(xintercept = Brood_Year_EFFs[1], linetype = "dashed") +
geom_vline(xintercept = Brood_Year_EFFs[2]) +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(labels = scales::comma) +
#scale_linetype_manual(values = c("2014 Brood" = "1", "2015 Brood" = "2"))
#scale_color_manual(name = 'Ricker Uncertainty', values = cols ) +
#scale_colour_manual(name = 'Brood Year Escapements',  values =cols, labels = c('2015')) +
#scale_colour_manual(name="Error Bars",values=cols) + scale_fill_manual(name="Bar",values=cols)
# can't seem to get legend to work -- come back to
theme_classic()
ggsave(paste(Name, ".pdf", sep=""), plot = Fig, width = 4, height = 3, units = "in")
fit_values
}
Esc_Fit
Esc_Fit <- Run_Ricker(Dat = SRdat_Start2001, BroodYears = c(2015,2016),
Name = "2020_TotalEsc", seed = 36, iter = 5000)
library(stan)
library(rstan)
Esc_Fit <- Run_Ricker(Dat = SRdat_Start2001, BroodYears = c(2015,2016),
Name = "2020_TotalEsc", seed = 36, iter = 5000)
Esc_Fit <- Run_Ricker(Dat = SRdat_Start2001, BroodYears = c(2015,2016),
Name = "2020_TotalEsc", seed = 36, iter = 5000)
source("Code/Functions.R")
setwd("C:/Users/davisbr/Documents/Sockeye Analytical/Forecast Development/Code")
getwd()
getwd("..")
setwd("..")
source("Code/Functions.R")
mydata <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.2, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = R, rho=0.4)
source("Code/Functions.R")
mydata <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.2, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = R, rho=0.4)
# Get SGen from the optimized output (i.e., minimum neg log-like)
SGen <- opt$minimum
# initiate population somwhere between 100 and Smax
init <- round(runif(4, 100, 1/true_b))
hr_vec <- runif(leng+age, hr_min, hr_max)
esc<-rep(NA,leng+age)
esc[1:age] <- init
catch<-rep(NA,leng+age)
rec<-rep(NA,leng+age)
eps <- rep(NA,leng+age)
for(i in (age+1):(leng+age)){
# don't let esc or rec get lower than 100
#rec[i] <- max (rlnorm(1, log(true_a) + log(esc[i-4]) - true_b*esc[i-4] , Sig_Ricker), 100)
R_mean <- true_a*esc[i-4] * exp(-true_b*esc[i-4])
# random recruitment residual
if(autoCorr == F){
eps[i] <- rnorm(1, 0, Sig_Ricker)
} else {
if(i == age+1){
# if first year just simulate random resid
eps[i] <- rnorm(1, 0, Sig_Ricker)
} else {
# in subsequent years start from previous e
eps[i] <- rnorm(1, rho*eps[i-1], Sig_Ricker*sqrt(1-rho^2))
}
}
if(lnorm_corr == F){
rec[i] <- max(R_mean*exp(eps[i]), 100)
} else {
rec[i] <- max(R_mean*exp(eps[i]-0.5*Sig_Ricker^2), 100)
}
# want to find way to make sure pop gets knocked down every once in a while
if(sum(esc[(i-4):(i-1)] > SMSY) == 4) { hr_vec[i] <- hr_max}
esc[i] <- max((1-hr_vec[i])*rec[i], 100)
catch[i] <- hr_vec[i]*rec[i]
}
leng=50; age=4; Sig_Ricker = 0.2; true_a = 3; true_b=1/10000;
hr_min = 0.2; hr_max = 0.8; lnorm_corr = F; autoCorr = R; rho=0.4
mydata <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.2, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = T, rho=0.4)
source("Code/Functions.R")
mydata <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.2, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = T, rho=0.4)
SimData <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.2, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = T, rho=0.4)
SimDataDF <- data.frame(S = round(SimData$S), R = (SimData$R), Year = 1:length(SimData$S))
ggplot(SimDataDF, aes(x=S, y=R)) + geom_point() + coord_fixed()
library(ggplot2)
library(TMB)
SimData <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.2, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = T, rho=0.4)
SimDataDF <- data.frame(S = round(SimData$S), R = (SimData$R), Year = 1:length(SimData$S))
ggplot(SimDataDF, aes(x=S, y=R)) + geom_point() + coord_fixed()
ggplot(SimDataDF, aes(x=Year, y=R)) + geom_point() + coord_fixed()
ggplot(SimDataDF, aes(x=Year, y=S)) + geom_point() + coord_fixed()
ggplot(SimDataDF, aes(x=Year, y=S)) + geom_point()
ggplot(SimDataDF, aes(x=Year, y=S)) + geom_line()
SimData <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.2, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = T, rho=0.6)
SimDataDF <- data.frame(S = round(SimData$S), R = (SimData$R), Year = 1:length(SimData$S))
ggplot(SimDataDF, aes(x=S, y=R)) + geom_point() + coord_fixed()
ggplot(SimDataDF, aes(x=Year, y=S)) + geom_line()
SimData <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.3, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = T, rho=0.6)
SimDataDF <- data.frame(S = round(SimData$S), R = (SimData$R), Year = 1:length(SimData$S))
ggplot(SimDataDF, aes(x=S, y=R)) + geom_point() + coord_fixed()
ggplot(SimDataDF, aes(x=Year, y=S)) + geom_line()
SimData <- Sim_Ricker_SR_Data( leng=50, age=4, Sig_Ricker = 0.3, true_a = 3, true_b=1/10000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = F, autoCorr = T, rho=0.5)
SimDataDF <- data.frame(S = round(SimData$S), R = (SimData$R), Year = 1:length(SimData$S))
ggplot(SimDataDF, aes(x=S, y=R)) + geom_point() + coord_fixed()
ggplot(SimDataDF, aes(x=Year, y=S)) + geom_line()
parameters_autocorr <- list(
alpha=(a_srm),
logbeta = log(b_srm),
logSigObs= log(.4),
rho=0.3,
delta=rep(0.0,length(SR$R))
)
compile("Ricker_autocorr.cpp",libtmb=FALSE, "-O1 -g", DLLFLAGS="",tracesweep = TRUE)
compile("Code/TMB/Ricker_autocorr.cpp",libtmb=FALSE, "-O1 -g", DLLFLAGS="",tracesweep = TRUE)
dyn.load(dynlib("Code/TMB/Ricker_autocorr"))
obj<-MakeADFun(mydata,parameters_autocorr,random="delta",DLL="Code/TMB/Ricker_autocorr")
parameters_autocorr <- list(
alpha=(a_srm),
logbeta = log(b_srm),
logSigObs= log(.4),
rho=0.3,
delta=rep(0.0,length(SR$R))
)
# LM version
srm<-lm(log(SimDataDF$R/SimDataDF$S)~ SimDataDF$S)
a_srm<-srm$coefficients[1]
b_srm<--srm$coefficients[2]
alpha<-exp(a_srm)
parameters_autocorr <- list(
alpha=(a_srm),
logbeta = log(b_srm),
logSigObs= log(.4),
rho=0.3,
delta=rep(0.0,length(SR$R))
)
parameters_autocorr <- list(
alpha=(a_srm),
logbeta = log(b_srm),
logSigObs= log(.4),
rho=0.3,
delta=rep(0.0,length(SimDataDF$R))
)
obj<-MakeADFun(mydata,parameters_autocorr,random="delta",DLL="Code/TMB/Ricker_autocorr")
obj<-MakeADFun(mydata,parameters_autocorr,random="delta",DLL="Ricker_autocorr")
mydata <- list(obs_logR=log(SimDataDF$R),obs_S=SimDataDF$S)
dyn.load(dynlib("Code/TMB/Ricker_autocorr"))
obj<-MakeADFun(mydata,parameters_autocorr,random="delta",DLL="Ricker_autocorr")
newtonOption(obj, smartsearch=FALSE)
opt<-nlminb(obj$par,obj$fn,obj$gr)
obj$report()
All_Ests <- data.frame(summary(sdreport(obj)))
All_Ests$Param <- row.names(All_Ests)
All_Ests
exp(1.001)
# Scale down data so close to 0
Scale <- 10^(floor(log(mean(SimDataDF$R), 10)))
Scale
mydata <- list(obs_logR=log(SimDataDF$R/Scale),obs_S=SimDataDF$S/Scale)
sqrt(
(obj$report()$SigObs)^2+
(obj$report()$SigObs*sqrt(1-obj$report()$rho^2))^2
)
compile("Ricker_autocorr_ch.cpp", libtmb=FALSE, "-O1 -g", DLLFLAGS="",tracesweep = TRUE)
compile("Code/TMB/Ricker_autocorr_ch.cpp", libtmb=FALSE, "-O1 -g", DLLFLAGS="",tracesweep = TRUE)
parameters_autocorr_ch <- list(
alpha=(a_srm),
logbeta = log(b_srm),
logSigObs= log(.4),
rho=0.3
#delta=rep(0.0,length(SR$R))
)
dyn.load(dynlib("Code/TMB/Ricker_autocorr_ch"))
#removed annual random year effect:
objch<-MakeADFun(mydata,parameters_autocorr_ch,DLL="Ricker_autocorr_ch")
newtonOption(obj, smartsearch=FALSE)
optch<-nlminb(objch$par,objch$fn,objch$gr)
All_Ests_ch <- data.frame(summary(sdreport(objch)))
All_Ests_ch$Param <- row.names(All_Ests_ch)
All_Ests_ch
exp(1.01)
exp(-2.29)
exp(-1.35)
All_Ests
exp(-1.67)
sqrt(1-o.5^2)
sqrt(1-0.5^2)
sqrt(1-0.2^2)
sqrt(1-0.9^2)
knitr::opts_chunk$set(echo = TRUE)
library(TMB)
library(pscl) # use this package for nice inverse gamma functions
library(truncnorm)
dyn.unload(dynlib("Code/TMB/SigmaTest"))
#dyn.unload(dynlib("Code/TMB/SigmaTest"))
#TMB::compile("Code/TMB/SigmaTest.cpp")
dyn.load(dynlib("Code/TMB/SigmaTest"))
getwd()
library(dplyr)
library(ggplot2)
library(TMB)
library(tmbstan)
source("Code/Functions.R")
SimData <- Sim_Ricker_SR_Data(leng=50, age=4, Sig_Ricker = 0.3, true_a = rnorm(1, 5, 2), true_b=1/100000,
hr_min = 0.2, hr_max = 0.8, lnorm_corr = FALSE)
SimDataDF <- data.frame(S = round(SimData$S), R = (SimData$R), Year = 1:length(SimData$S))
ggplot(SimDataDF, aes(x=S, y=R)) + geom_point() + coord_fixed()
# Create DF to store true and fitted values
DataDF <- SimDataDF[, c("S", "R", "Year")]
DataDF$Fit <- SimData$true_a * DataDF$S * exp( -SimData$true_b * DataDF$S )
DataDF$Mod <- "True"
DataDF$CI_low <- DataDF$CI_up  <-  DataDF$Pred <- DataDF$Pred_low <- DataDF$Pred_up <- DataDF$Fit
# only need to compile if changed model
# dyn.unload(dynlib("Code/TMB/Single_Stock_Ricker"))
TMB::compile("Code/TMB/Single_Stock_Ricker.cpp") # can't seem to compile if have TMBstan loaded
# only need to compile if changed model
# dyn.unload(dynlib("Code/TMB/Single_Stock_Ricker"))
# TMB::compile("Code/TMB/Single_Stock_Ricker.cpp") # can't seem to compile if have TMBstan loaded
dyn.load(dynlib("Code/TMB/Single_Stock_Ricker"))
TMB_No_Prior <- RunRicker(Data = SimDataDF,
Fitting_SW = "TMB",
Priors = F, Name = "TMB_No_Prior")
# Now run with priors same as "true" values
TMB_True_Prior <- RunRicker(Data = SimDataDF,  Fitting_SW = "TMB",
Priors = T, Name = "TMB_True_Prior",
logA_mean = log(SimData$true_a),
logA_sig = 0.5,
Smax_mean = 1/SimData$true_b,
Smax_sig = 1/SimData$true_b/4)
# Run same model as mcmc using tmbstan
library(tmbstan)
tmbstan_True_Prior <- RunRicker(Data = SimDataDF,  Fitting_SW = "tmbstan",
Priors = T,  Name = "tmbstan_True_Prior",
logA_mean = log(SimData$true_a),
logA_sig = 0.5,
Smax_mean = 1/SimData$true_b,
Smax_sig = 1/SimData$true_b/4)
library(R2jags)
JAGS_True_Prior <- RunRicker(Data = SimDataDF,  Fitting_SW = "JAGS",
Priors = T,  Name = "JAGS_True_Prior",
logA_mean = log(SimData$true_a),
logA_sig = 0.5,
Smax_mean = 1/SimData$true_b,
Smax_sig = 1/SimData$true_b/4)
# Fit using Stan
Stan_True_Prior <- RunRicker(Data = SimDataDF,  Fitting_SW = "Stan",
Priors = T,   Name = "Stan_True_Prior",
logA_mean = log(SimData$true_a),
logA_sig = 0.5,
Smax_mean = 1/SimData$true_b,
Smax_sig = 1/SimData$true_b/4)
All_Ests <- bind_rows(DataDF[[1]], TMB_No_Prior[[1]], TMB_True_Prior[[1]],
tmbstan_True_Prior[[1]], JAGS_True_Prior[[1]],
Stan_True_Prior[[1]])
All_Ests <- bind_rows(DataDF, TMB_No_Prior[[1]], TMB_True_Prior[[1]],
tmbstan_True_Prior[[1]])
# Now plot all to compare
ggplot(data = All_Ests, aes(x=S, y=Fit, ymin = CI_low, ymax = CI_up, col = Mod, fill= Mod)) +
geom_line(size = 1.5) +
geom_ribbon( alpha = 0.1) +
geom_point(aes(x=S, y=R), col = "black") +
geom_ribbon(aes(x=S, y=Pred, ymin = Pred_low, ymax = Pred_up, fill= Mod),
alpha = 0.05) +
theme_bw()
